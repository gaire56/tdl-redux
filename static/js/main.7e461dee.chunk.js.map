{"version":3,"sources":["components/ToDoList.jsx","actions/index.js","components/AddTodo.jsx","App.js","reducer/todos.js","reducer/index.js","app/store.js","serviceWorker.js","index.js"],"names":["connect","state","todos","data","props","className","map","todo","index","message","onClick","dispatch","type","id","aria-hidden","onSubmit","e","preventDefault","input","target","userInput","value","Math","random","name","placeholder","App","initialState","action","filter","todoReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAiCeA,eA7BS,SAACC,GAAD,MAAY,CAClCC,MAAOD,EAAMC,MAAMC,QA4BNH,EAzBE,SAACI,GAChB,OACE,mCACE,qBAAKC,UAAU,cAAf,SACE,6BACGD,EAAMF,MAAMI,KAAI,SAACC,EAAMC,GAAP,OACf,+BACGD,EAAKE,QAEN,mBACEC,QAAS,kBAAMN,EAAMO,SCVF,CACjCC,KAFkB,cAGlBC,GDQuDN,EAAKM,MAC9CR,UAAU,cACVS,cAAY,WANPN,eEmBNR,iBA5BC,SAACI,GACf,OACE,mCACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,uBACA,2CACA,uBACA,uBACEU,SAAU,SAACC,GACTA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOC,UAAUC,MACjCjB,EAAMO,SDhBiB,CACnCC,KAFe,WAGfH,QCcmCS,EDbnCL,GAAIS,KAAKC,WCcGP,EAAEG,OAAOC,UAAUC,MAAQ,IAL/B,UAQE,uBAAOG,KAAK,YAAYC,YAAY,eAAeb,KAAK,SACxD,0CAEF,6BACE,cAAC,EAAD,gBCXGc,MATf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,O,sBCRAsB,EAAe,CACnBxB,KAAM,IA0BOD,EAvBD,WAAmC,IAAlCD,EAAiC,uDAAzB0B,EAAcC,EAAW,uCAC9C,OAAQA,EAAOhB,MACb,IAAK,WACH,OAAO,2BACFX,GADL,IAEEE,KAAK,GAAD,mBACCF,EAAME,MADP,CAEF,CACEM,QAASmB,EAAOnB,QAChBI,GAAIe,EAAOf,QAInB,IAAK,cACH,IAAMX,EAAQD,EAAME,KAAK0B,QAAO,SAACtB,GAAD,OAAUA,EAAKM,KAAOe,EAAOf,MAC7D,OAAO,2BACFZ,GADL,IAEEE,KAAMD,IAEV,QACE,OAAOD,ICjBE6B,EAJKC,YAAgB,CAClC7B,UCGa8B,EAJDC,YACZH,EACAI,OAAOC,8BAAgCD,OAAOC,gCCO5BC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7e461dee.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteTodo } from '../actions';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  todos: state.todos.data,\r\n});\r\n\r\nconst ToDoList = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"todo__style\">\r\n        <ul>\r\n          {props.todos.map((todo, index) => (\r\n            <li key={index}>\r\n              {todo.message}\r\n\r\n              <i\r\n                onClick={() => props.dispatch(deleteTodo(todo.id))}\r\n                className=\"fa fa-times\"\r\n                aria-hidden=\"true\"\r\n                // onClick={() => {\r\n                //   props.onSelect(props.id);\r\n                // }}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps)(ToDoList);\r\n","const ADD_TODO = 'ADD_TODO';\r\nexport const addTodo = (message) => ({\r\n  type: ADD_TODO,\r\n  message,\r\n  id: Math.random(),\r\n});\r\n\r\nconst DELETE_TODO = 'DELETE_TODO';\r\nexport const deleteTodo = (id) => ({\r\n  type: DELETE_TODO,\r\n  id,\r\n});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions/index';\r\nimport ToDoList from './ToDoList';\r\n\r\nconst AddTodo = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"app\">\r\n        <div className=\"center__div\">\r\n          <br />\r\n          <h1>ToDo List</h1>\r\n          <br />\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              const input = e.target.userInput.value;\r\n              props.dispatch(addTodo(input));\r\n              e.target.userInput.value = '';\r\n            }}\r\n          >\r\n            <input name=\"userInput\" placeholder=\"add todo ...\" type=\"text\" />\r\n            <button>+</button>\r\n          </form>\r\n          <ol>\r\n            <ToDoList />\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect()(AddTodo);\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport AddTodo from './components/AddTodo';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AddTodo />\r\n      {/* <ToDoList /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n  data: [],\r\n};\r\n\r\nconst todos = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return {\r\n        ...state,\r\n        data: [\r\n          ...state.data,\r\n          {\r\n            message: action.message,\r\n            id: action.id,\r\n          },\r\n        ],\r\n      };\r\n    case 'DELETE_TODO':\r\n      const todos = state.data.filter((todo) => todo.id !== action.id);\r\n      return {\r\n        ...state,\r\n        data: todos,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default todos;\r\n","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\n\r\nconst todoReducer = combineReducers({\r\n  todos,\r\n});\r\n\r\nexport default todoReducer;\r\n","import { createStore } from 'redux';\r\nimport todoReducer from '../reducer';\r\n\r\nconst store = createStore(\r\n  todoReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}